#!/usr/bin/env python3
"""This module provides package management functionality for MaRDI"""
import os
import sys
import time
import itertools
import signal
import subprocess
import tempfile
import argparse
import concurrent.futures
import tomli
import gi
gi.require_version("OSTree", "1.0")
from gi.repository import OSTree, GLib

VERSION = '0.3-dev'
BWRAP_DEFAULT = f"{os.getenv('HOME')}/.var/org.mardi.maps/deps/bubblewrap/_builddir/bwrap"
if os.getenv('BWRAP_CMD') is not None:
    BWRAP = str(os.getenv('BWRAP_CMD'))
else:
    BWRAP = BWRAP_DEFAULT
OSTREE_REPO_MODE_BARE_USER = 2
SPINNER = itertools.cycle(['-', '\\', '|', '/'])
HOME = os.getenv('HOME')
KEEP_FREE_SPACE = 3
VERBOSE = False
OG_SIGINT_HANLDER = signal.getsignal(signal.SIGINT)


# Define a CLI
def addCLI():
    """Function adds a CLI to the package."""
    parser = argparse.ArgumentParser(
        prog='maps',
        description=("maps - MaRDI Packaging System : "
                     "Provides a unified interface for packaging "
                     "and deploying software environments."
                     ),
    )
    subparser = parser.add_subparsers(help="Use --help with each of the commands for more help ",
                                      dest="SubPars_NAME")
    # arguments for "main" path
    parser.add_argument('--version', action='version', version=VERSION)

    parser_runtime = subparser.add_parser("runtime",
                                          help="Command for deploying and executing runtimes")
    parser_runtime.add_argument('--command', dest='COMMAND', action='store',
                                default=False, help="Override for the command to run")
    parser_runtime.add_argument('-d', '--deploy', dest='DEPLOY', action='store',
                                default=False, help="deploy mode, for installing environments")
    parser_runtime.add_argument('-l', '--list', dest='LIST', action='store_true',
                                default=False, help="List available environments")
    parser_runtime.add_argument('--list-local', dest='LIST_LOCAL', action='store_true',
                                default=False, help="List available environments")
    parser_runtime.add_argument('--repo', dest='REPO', help="Repository to use")
    parser_runtime.add_argument('--reset', dest='RESET', action='store',
                                default=False, help="Reset the runtime.")
    parser_runtime.add_argument('-r', '--run', dest='RUN', action='store',
                                default=False, help="Which runtime to play.")
    parser_runtime.add_argument('-u', '--uninstall', dest='UNINSTALL', action='store',
                                default=False, help="Uninstall a runtime")
    parser_runtime.add_argument('--update', dest="UPDATE", action='store',
                                default=False, help="Update a runtime")
    parser_runtime.add_argument('-v', '--verbose', dest='VERBOSE', action='store_true',
                                help="enable verbose output")

    # arguments for remote management
    parser_remote = subparser.add_parser("remote",
                                         help="Command to add, delete, or list available remotes")
    parser_remote.add_argument('--add-remote', dest='REMOTE', nargs=2,
                               metavar=("REMOTE_NAME", "REMOTE_URL"), action='store',
                               default=False, help="Add REMOTE to local ostree repo")
    parser_remote.add_argument('--del-remote', dest="DEL_REMOTE", action='store',
                               default=False, help="Delete REMOTE from local ostree repo")
    parser_remote.add_argument('--list', dest="LIST", action='store_true',
                               default=False, help="List configured remotes")
    parser_remote.add_argument('--repo', dest='REPO', help="Repository to use")
    parser_remote.add_argument('-v', '--verbose', dest='VERBOSE', action='store_true',
                               help="enable verbose output")

    # arguments for packaging
    parser_pack = subparser.add_parser("package",
                                       help="Package mode, for creating runtimes")
    parser_pack.add_argument('-c', '--commit', dest='COMMIT', nargs=2, metavar=("TREE", "BRANCH"),
                             default=False, help="Commit TREE to BRANCH in REPO")
    parser_pack.add_argument('-i', '--initialize', dest='DIR',
                             help="initialize DIR with a good base tree")
    parser_pack.add_argument('-s', '--sandbox', dest='LOCATION',
                             help="Start a sandbox at LOCATION")
    parser_pack.add_argument('-v', '--verbose', dest='VERBOSE', action='store_true',
                             help="enable verbose output")
    parser_pack.add_argument('--repo', dest='REPO', help="Repository to use")

    return parser, parser_runtime, parser_remote, parser_pack


def sanity_checks(parsers):
    """Some simply sanity checks, before the program proceeds"""
    if len(sys.argv) == 1:
        parsers[0].print_help()
        sys.exit(1)

    if len(sys.argv) == 2:
        if "runtime" in sys.argv:
            parsers[1].print_help()
        elif "remote" in sys.argv:
            parsers[2].print_help()
        elif "package" in sys.argv:
            parsers[3].print_help()
        sys.exit(1)


def program_init(repopath):
    """Init function verifies requirements, sets up the repo. Returns the OSTree Repo."""
    if VERBOSE:
        print("Ensuring bubblewrap exists...")
    # step 1 : check bwrap is installed
    if (BWRAP == BWRAP_DEFAULT) and not os.path.isfile(BWRAP):
        print("Bubblewrap was not found, and is being automatically installed....")
        # clone and compile bubblewrap
        opt1 = "-q"
        opt2 = "1>/dev/null"
        if VERBOSE:
            print("Cloning bubblewrap...")
            opt1 = ""
            opt2 = ""
        subprocess.run(f"git clone {opt1} https://github.com/aaruni96/bubblewrap.git "
                       f"{BWRAP[0:-15]}", shell=True, check=False)
        subprocess.run(f"cd {BWRAP[0:-15]} && git checkout {opt1} ak/sigint", shell=True,
                       check=True)
        if VERBOSE:
            print("Compiling bubblewrap...")
        subprocess.run(f"cd {BWRAP[0:-15]} && meson _builddir {opt2} "
                       f"&& meson compile -C _builddir {opt2}", shell=True, check=False)
        print("Bubblewrap installed!")
    assert os.path.isfile(BWRAP)
    if VERBOSE:
        print("Bubblewrap okay!")
    # step 2 : create the directory
    if VERBOSE:
        print("Ensuring ostree repo directory exists...")
        opts = "-pv"
    else:
        opts = "-p"
    subprocess.run(f"mkdir {opts} {'/'.join(repopath.split('/'))}".split(), check=True)

    # step 3 : Configure a good known remote, if not already present
    repo = repopath.split('/')[-1]
    repopath = '/'.join(repopath.split('/')[0:-1])
    config_path = f"{repopath}/repo/config"
    config_exists = os.path.isfile(config_path)
    fd = os.open(repopath, os.O_RDONLY)
    repo = OSTree.Repo.create_at(fd, repo,
                                 OSTree.RepoMode(OSTREE_REPO_MODE_BARE_USER),
                                 GLib.Variant('a{sv}', {}), None)
    # if we just created a repo (and thus config), configure how we reserve free space
    if not config_exists:
        if VERBOSE:
            print("Just created repo, configuring free space parameters...")
        with open(config_path, 'a', encoding="utf-8") as fo:
            fo.write(f'min-free-space-size={KEEP_FREE_SPACE}GB\n')
        repo.reload_config()
    if (not repo.remote_list()) or "Official" not in repo.remote_list():
        if VERBOSE:
            print("Automatically adding official remote")
        repo.remote_add("Official", "https://repo.oscar-system.org/",
                        GLib.Variant('a{sv}', {"gpg-verify": GLib.Variant('b', False)}), None)
    return repo


def make_remote_ref_list(repo, remote):
    """Given a repo and a remote, return a list of refs in the remote of that repo"""
    if remote is None:
        return []
    if repo.remote_list() is None:
        print(f"Repo {repo} has no remotes!")
        return []
    if repo.remote_list() is not None:
        if remote not in repo.remote_list():
            print(f"Repo {repo} has no remote {remote}!")
            return []
    remote_refs = []
    remote_refs.extend(list(repo.remote_list_refs(remote)[1].keys()))
    return remote_refs


def mode_list(repo):
    """Prints a list of available refs"""
    print("Available runtimes are :")
    refs = list(repo.list_refs()[1].keys())
    if refs:
        print("Local")
        for ref in sorted(refs):
            print(f"\t - {ref}")
    remotes = repo.remote_list()
    for remote in remotes:
        remote_refs = make_remote_ref_list(repo, remote)
        if remote_refs:
            print(remote)
            for ref in sorted(remote_refs):
                print(f"\t - {ref}")


def mode_remotes(repo, args):
    """Administrative mode for remotes of the repo"""
    if args.LIST is not False:
        for remote in repo.remote_list():
            print(remote)
        return
    if args.REMOTE is not False:
        repo.remote_add(args.REMOTE[0], args.REMOTE[1],
                        GLib.Variant('a{sv}', {"gpg-verify": GLib.Variant('b', False)}), None)
        print(f"Added {args.REMOTE} to list of remotes!")
        return
    if args.DEL_REMOTE is not False:
        repo.remote_delete(args.DEL_REMOTE)
        print(f"Deleted {args.DEL_REMOTE} from list of remotes!")
        return


def mode_run(args):
    """Function to execute a published environment"""
    # check if the path exists
    DATADIR = f"{os.getenv('HOME')}/.var/org.mardi.maps/{args.RUN}"
    if VERBOSE:
        print(f"Attempting to run {DATADIR}...")
    if not os.path.isdir(DATADIR):
        raise AssertionError(f"Data directory does not exist. Is {args.RUN} installed ?")

    # ensure share source and targets exist
    if VERBOSE:
        print("Making sure Public directories exist...")
        opts = '-pv'
    else:
        opts = '-p'
    subprocess.run(f"mkdir {opts} {os.getenv('HOME')}/Public".split(), check=True)
    subprocess.run(f"mkdir {opts} {DATADIR}/live/home/runtime/Public".split(), check=True)

    # check for manifest file
    if os.path.isfile(f"{DATADIR}/live/manifest.toml"):
        with open(f"{DATADIR}/live/manifest.toml", 'rb') as manifest_file:
            command = tomli.load(manifest_file)
            command = command['Core']["command"]
    else:
        command = "bash --norc"
    if args.COMMAND:
        command = args.COMMAND
    if command == '':
        raise ValueError
    # launch sandbox
    print(f"Launching {args.RUN}...")
    senv = os.environ
    senv["HOME"] = "/home/runtime"
    senv["PS1"] = "\\u@runtime:\\w# "
    senv["LC_ALL"] = "C"
    # ignore SIGINT
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    rstatus = subprocess.run((f"{BWRAP} --forward-signals --unshare-user --unshare-pid "
                              f"--overlay-src {DATADIR}/rofs --overlay {DATADIR}/rwfs "
                              f"{DATADIR}/tmpfs /  --bind {HOME}/Public {senv['HOME']}/Public"
                              " --die-with-parent --proc /proc --dev /dev --uid 0 --gid 0 "
                              f"{command} --verbose").split(),
                             env=senv, check=False)
    if rstatus.returncode != 0:
        print(f"Sandbox exited with return code {rstatus.returncode}")
    elif VERBOSE:
        print("Sandbox exited successfully!")
    # stop ignoring SIGINT
    signal.signal(signal.SIGINT, OG_SIGINT_HANLDER)


def zipped_pull(zarglist):
    """Simple wrapper function to repo.pull()"""
    repo = zarglist[0]
    remote = zarglist[1]
    refname = zarglist[2]
    progress = zarglist[3]
    options = GLib.Variant('a{sv}',
                           {"refs": GLib.Variant('as', [refname]),
                            "flags": GLib.Variant('i', OSTree.RepoPullFlags(4))})
    repo.pull_with_options(remote, options, progress, None)


def download(args, repo, remote, refname, cerror=0):
    """Function to download a repo from remote"""
    with concurrent.futures.ThreadPoolExecutor() as executor:
        progress = OSTree.AsyncProgress.new()
        future = executor.submit(zipped_pull, [repo, remote, refname, progress])
        print(f"Downloading {refname} from {remote}. This may take some time.\nPlease wait...")
        while True:
            sys.stdout.write(next(SPINNER))
            sys.stdout.flush()
            time.sleep(0.2)
            sys.stdout.write('\b')
            if future.done():
                sys.stdout.flush()
                break
        if progress.get_status() is None:
            print(f"Error, {future.exception()}")
            cerror = cerror + 1
            # if cerror > 10:
            #    print("10 consecutive network failures. Bailing!")
            #    future.result()
            print(f"Retrying... ({cerror}/??)")
            download(args, repo, remote, refname, cerror)
        else:
            cerror = 0
            print(progress.get_status())


# Uninstall
def uninstall_runtime(repo, args):
    """Function to remove a runtime from both the local disk checkout, and the local repo"""
    # Check if runtime is checked out
    FLAG_DIREXISTS = False
    FLAG_REFEXISTS = False
    if ':' in args.UNINSTALL:
        remote, uninstall = args.UNINSTALL.split(':')
    else:
        uninstall = args.UNINSTALL
    DATADIR = f"{os.getenv('HOME')}/.var/org.mardi.maps/{uninstall}"
    if VERBOSE:
        print(f"Trying to remove {uninstall}...")
    if os.path.isdir(DATADIR):
        FLAG_DIREXISTS = True
        if VERBOSE:
            print("Deleting files...")
            opts = '-rvf'
        else:
            opts = '-rf'
        subprocess.run(f"rm {opts} {DATADIR}".split(), check=True)

    for runtime in repo.list_refs()[1].keys():
        if uninstall in runtime:
            FLAG_REFEXISTS = True
            remote = None
            if ':' in runtime:
                remote, runtime = runtime.split(':')
            if VERBOSE:
                print("Marking branch for deletion from repo...")
            repo.set_ref_immediate(remote, runtime, None, None)
            if VERBOSE:
                print("Pruning repo...")
            repo.prune(OSTree.RepoPruneFlags(2), -1, None)
            break

    if not (FLAG_DIREXISTS and FLAG_REFEXISTS):
        print(f"Error, {uninstall} isn't deployed and thus cannot be uninstalled!")
    else:
        print(f"Uninstalled {uninstall} !")

    sys.exit()


# Update
def mode_update(repo, args, remote="Official"):
    """Function to update a runtime identifier to its recent version (if any)"""
    if not args.UPDATE:
        args.UPDATE = args.DEPLOY
    # check if ref is installed
    installed = args.UPDATE in [key.split(':')[-1] for key in repo.list_refs()[1].keys()]
    if VERBOSE:
        print(f"List of installed runtimes is {repo.list_refs()[1].keys()}")
    if not installed:
        print(f"{args.UPDATE} is not installed, hence cannot be updated! Try --deploy instead")
        return 1

    # check if we need an update
    same = repo.list_refs()[1][f'{remote}:{args.UPDATE}'] ==\
        repo.remote_list_refs(remote)[1][args.UPDATE]
    if VERBOSE:
        print(f"Local refhash = {repo.list_refs()[1][f'{remote}:{args.UPDATE}']}")
        print(f"Remote refhash = {repo.remote_list_refs(remote)[1][args.UPDATE]}")
    if same:
        print(f"{args.UPDATE} is already up to date, refreshing!")
    else:
        # download the update
        download(args, repo, remote, args.UPDATE)

    DATADIR = f"{os.getenv('HOME')}/.var/org.mardi.maps/{args.UPDATE}"

    # clean out the data dir
    if VERBOSE:
        opts1 = "-rvf"
    else:
        opts1 = "-rf"
    subprocess.run(f"rm {opts1} {DATADIR}/rofs".split(), check=True)

    # checkout branch to tree
    refhash = repo.remote_list_refs(remote)[1][args.UPDATE]
    tfd = os.open(DATADIR, os.O_RDONLY)
    osopts = blank_options()
    osopts.bareuseronly_dirs = True
    osopts.mode = OSTree.RepoCheckoutMode(1)
    if VERBOSE:
        print(f"Checking out tree from repo to {DATADIR}/rofs ...")
    repo.checkout_at(osopts, tfd, "rofs", refhash, None)

    print(f"Success... {args.DEPLOY} is now updated!")

    return 0


# Deploy Mode
def mode_deploy(repo, args):
    """Function to deploy from repo to local disk"""

    if args.DEPLOY in [j for remotes in repo.remote_list()
                       for j in make_remote_ref_list(repo, remotes)]:
        pass
    elif args.DEPLOY in list(repo.list_refs()[1].keys()):
        refhash = repo.list_refs()[1][args.DEPLOY]
    else:
        print("Error: runtime not found! Use list mode --list to view available runtimes.")
        sys.exit(1)

    DATADIR = f"{os.getenv('HOME')}/.var/org.mardi.maps/{args.DEPLOY}"
    PDATADIR = '/'.join(DATADIR.split('/')[0:-1])

    # check if update
    if os.path.exists(DATADIR):
        print("Directory already exists, trying to update...")
        ret = mode_update(repo, args)
        if ret == 1:
            raise AssertionError("Error: Unknown error!")
        return

    # download
    for remote in repo.remote_list():
        if args.DEPLOY in repo.remote_list_refs(remote)[1]:
            refhash = repo.remote_list_refs(remote)[1][args.DEPLOY]
            if VERBOSE:
                print(f"Downloading {refhash}...")
            download(args, repo, remote, args.DEPLOY)
            break

    # setup directories
    if VERBOSE:
        print("Setting up direcotires...")
        opts1 = '-pv'
    else:
        opts1 = '-p'
    subprocess.run(f"mkdir {opts1} {PDATADIR}".split(), check=True)
    subprocess.run(f"mkdir {opts1} {DATADIR}", shell=True, check=True)
    subprocess.run(f"mkdir {opts1} {DATADIR}/rwfs".split(), check=True)
    subprocess.run(f"mkdir {opts1} {DATADIR}/tmpfs".split(), check=True)
    subprocess.run(f"mkdir {opts1} {DATADIR}/live".split(), check=True)

    # checkout from local repo
    tfd = os.open(DATADIR, os.O_RDONLY)
    osopts = blank_options()
    osopts.bareuseronly_dirs = True
    osopts.mode = OSTree.RepoCheckoutMode(1)
    if VERBOSE:
        print(f"Checking out tree from repo to {DATADIR}/rofs ...")
    repo.checkout_at(osopts, tfd, "rofs", refhash, None)
    print(f"Success... {args.DEPLOY} is now ready to use!")


def blank_options():
    """Return an OSTree.RepoCheckoutAtOptions object,
    with all (most) options blanked out explicitly """
    opts = OSTree.RepoCheckoutAtOptions()
    opts.bareuseronly_dirs = False
    # opts.devino_to_csum_cache =
    opts.enable_fsync = False
    opts.enable_uncompressed_cache = False
    # opts.filter =
    # opts.filter_user_data =
    opts.force_copy = False
    opts.force_copy_zerosized = False
    opts.mode = OSTree.RepoCheckoutMode(0)
    opts.no_copy_fallback = False
    opts.overwrite_mode = OSTree.RepoCheckoutOverwriteMode(0)
    opts.process_passthrough_whiteouts = False
    opts.process_whiteouts = False
    # opts.sepolicy
    opts.sepolicy_prefix = ''
    # opts.subpath = ''
    # opts.unused_bools = []
    # opts.unused_ints = []
    # opts.unused_ptrs = []
    return opts


# Package Mode
def mode_package(repo, args):
    """Function for package mode. Not intended to be used by "end users" """
    if args.DIR is not None:
        refhash = ''
        if 'Official:base/x86_64/debian' not in list(repo.list_refs()[1].keys()):
            # import base to local repo
            if VERBOSE:
                print("base/x86_64/debian not found locally, fetching...")
            refhash = repo.remote_list_refs("Official")[1]['base/x86_64/debian']
            download(args, repo, "Official", "base/x86_64/debian")
        else:
            refhash = repo.list_refs()[1]['Official:base/x86_64/debian']
        with tempfile.TemporaryDirectory() as tmpdir:
            tfd = os.open(tmpdir, os.O_RDONLY)
            osopts = blank_options()
            osopts.bareuseronly_dirs = True
            osopts.mode = OSTree.RepoCheckoutMode(1)
            repo.checkout_at(osopts, tfd, "ostree", refhash, None)
            if VERBOSE:
                print("Creating directory...")
                opts = '-v'
            else:
                opts = ''
            if os.system(f"mkdir {opts} {args.DIR}") == 0:
                os.system(f"cp -r --reflink=auto {tmpdir}/ostree/* {args.DIR}/")
                print(f"Successfully initialized a base debian tree at {args.DIR} !")
            else:
                print(f"ERROR: Could not create {args.DIR}! Bailing!")
    if args.LOCATION is not None:
        # location is a functional tree, we just have to sandbox in it
        # its the user's responsibility to ensure the tree is good
        print(f"Launching a sandbox in {args.LOCATION}...")
        senv = os.environ
        senv["HOME"] = "/home/runtime"
        senv["PS1"] = "\\u@runtime:\\w# "
        senv["LC_ALL"] = "C"
        # ignore SIGINT
        signal.signal(signal.SIGINT, signal.SIG_IGN)
        rstatus = subprocess.run([BWRAP, "--forward-signals", "--unshare-user", "--unshare-pid",
                                  "--bind", args.LOCATION, "/", "--proc", "/proc", "--dev", "/dev",
                                  "--die-with-parent", "--uid", "0", "--gid", "0", "bash",
                                  "--norc"],
                                 env=senv, check=False)
        if VERBOSE:
            print("Exiting sandbox...")
        if rstatus.returncode != 0:
            print(f"Sandbox exited with return code {rstatus.returncode}")
        # stop ignoring SIGINT
        signal.signal(signal.SIGINT, OG_SIGINT_HANLDER)
    if args.COMMIT is not False:
        # we are given TREE and BRANCH. All we have to do is commit TREE to BRANCH
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future = executor.submit(commit, [repo, args.COMMIT[0], args.COMMIT[1]])
            print(f"Committing {args.COMMIT[0]} as {args.COMMIT[1]}. Please wait...")
            while True:
                sys.stdout.write(next(SPINNER))
                sys.stdout.flush()
                time.sleep(0.2)
                sys.stdout.write('\b')
                if future.done():
                    sys.stdout.flush()
                    break
            print("Done!")
        _, refs = repo.list_refs()
        if VERBOSE:
            print("Currently available refs: ")
            print(list(refs.keys()))


def commit(zarglist):
    """
    Function commits a tree to a repo in branch asynchronously,
    so spinner can be animated in the main thread to show activity.
    """
    repo = zarglist[0]
    tree = zarglist[1]
    branch = zarglist[2]
    if VERBOSE:
        print("\bPreparing transaction...")
    if tree[0] != '/':
        # if not an absolute pathname
        tree = f"./{tree}"
    repo.prepare_transaction()
    if VERBOSE:
        print("\bConstructing mutable tree in memory...")
    mutree = OSTree.MutableTree.new()
    if VERBOSE:
        print("\bFilling tree...")
    mfd = os.open('/'.join(tree.split('/')[0:-1]), os.O_RDONLY)
    repo.write_dfd_to_mtree(mfd, tree.split('/')[-1], mutree, None, None)
    mfile = repo.write_mtree(mutree, None)
    mcommit = repo.write_commit(None, None, None, None, mfile[1], None)
    if VERBOSE:
        print(f"\bCommitting to tree with hash {mcommit[1]}")
    repo.transaction_set_ref(None, branch, mcommit[1])
    repo.commit_transaction(None)


def reset(runtime):
    """
    Function resets a runtime, simply by deleting the contents of the "rwfs" dir.
    """
    DATADIR = f"{os.getenv('HOME')}/.var/org.mardi.maps/{runtime}"
    if VERBOSE:
        print(f"Resetting {runtime}...")
        opts = '-rvf'
    else:
        opts = '-rf'
    subprocess.run(f"rm {opts} {DATADIR}/live/*".split(), check=True)
    print(f"{runtime} reset successfully!")


# runtime mode: the default path for execution
def mode_runtime(repo, args):
    """
    Runtime mode, the default path for execution, and the "end user" mode.
    """

    if args.LIST:
        mode_list(repo)
    elif args.LIST_LOCAL:
        refs = list(repo.list_refs()[1].keys())
        if refs:
            for ref in sorted(refs):
                print(f"{ref.split(':')[-1]}")
    elif args.RESET:
        reset(args.RESET)
    elif args.UNINSTALL:
        uninstall_runtime(repo, args)
    elif args.RUN:
        mode_run(args)
    elif args.DEPLOY:
        mode_deploy(repo, args)
    elif args.UPDATE:
        mode_update(repo, args)


# Main function
def main():
    """Main function"""
    # is modifying argv evil ?
    # if no "mode" is specified
    if ("runtime" not in sys.argv) and ("remote" not in sys.argv) and ("package" not in sys.argv):
        # if you're not just asking for help or version
        if "-h" in sys.argv:
            pass
        elif "--help" in sys.argv:
            pass
        elif "--version" in sys.argv:
            pass
        elif len(sys.argv) == 1:
            pass
        else:
            sys.argv.insert(1, "runtime")
    parsers = addCLI()
    parser = parsers[0]
    args = parser.parse_args()

    # Some sanity checks
    sanity_checks(parsers)

    global VERBOSE
    VERBOSE = args.VERBOSE

    # Setup
    if os.getenv('XDG_DATA_HOME') is not None:
        data = os.getenv('XDG_DATA_HOME')
    else:
        # this will crash if HOME is not set. How likely?
        data = f"{os.getenv('HOME')}/.local/share"
    data = f"{data}/org.mardi.maps"
    if args.REPO is None:
        repopath = f"{data}/ostree/repo"
    else:
        repopath = args.REPO

    repo = program_init(repopath)

    # Run mode
    if args.SubPars_NAME == 'runtime':
        mode_runtime(repo, args)
    elif args.SubPars_NAME == 'remote':
        mode_remotes(repo, args)
    elif args.SubPars_NAME == 'package':
        mode_package(repo, args)
    else:
        raise ValueError("Impossible case!")


if __name__ == "__main__":
    main()
